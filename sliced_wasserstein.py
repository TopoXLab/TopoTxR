# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _sliced_wasserstein
else:
    import _sliced_wasserstein

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sliced_wasserstein.delete_SwigPyIterator

    def value(self):
        return _sliced_wasserstein.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _sliced_wasserstein.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _sliced_wasserstein.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _sliced_wasserstein.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _sliced_wasserstein.SwigPyIterator_equal(self, x)

    def copy(self):
        return _sliced_wasserstein.SwigPyIterator_copy(self)

    def next(self):
        return _sliced_wasserstein.SwigPyIterator_next(self)

    def __next__(self):
        return _sliced_wasserstein.SwigPyIterator___next__(self)

    def previous(self):
        return _sliced_wasserstein.SwigPyIterator_previous(self)

    def advance(self, n):
        return _sliced_wasserstein.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _sliced_wasserstein.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _sliced_wasserstein.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _sliced_wasserstein.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _sliced_wasserstein.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _sliced_wasserstein.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _sliced_wasserstein.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _sliced_wasserstein:
_sliced_wasserstein.SwigPyIterator_swigregister(SwigPyIterator)

class PD(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _sliced_wasserstein.PD_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sliced_wasserstein.PD___nonzero__(self)

    def __bool__(self):
        return _sliced_wasserstein.PD___bool__(self)

    def __len__(self):
        return _sliced_wasserstein.PD___len__(self)

    def __getslice__(self, i, j):
        return _sliced_wasserstein.PD___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sliced_wasserstein.PD___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sliced_wasserstein.PD___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sliced_wasserstein.PD___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sliced_wasserstein.PD___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sliced_wasserstein.PD___setitem__(self, *args)

    def pop(self):
        return _sliced_wasserstein.PD_pop(self)

    def append(self, x):
        return _sliced_wasserstein.PD_append(self, x)

    def empty(self):
        return _sliced_wasserstein.PD_empty(self)

    def size(self):
        return _sliced_wasserstein.PD_size(self)

    def swap(self, v):
        return _sliced_wasserstein.PD_swap(self, v)

    def begin(self):
        return _sliced_wasserstein.PD_begin(self)

    def end(self):
        return _sliced_wasserstein.PD_end(self)

    def rbegin(self):
        return _sliced_wasserstein.PD_rbegin(self)

    def rend(self):
        return _sliced_wasserstein.PD_rend(self)

    def clear(self):
        return _sliced_wasserstein.PD_clear(self)

    def get_allocator(self):
        return _sliced_wasserstein.PD_get_allocator(self)

    def pop_back(self):
        return _sliced_wasserstein.PD_pop_back(self)

    def erase(self, *args):
        return _sliced_wasserstein.PD_erase(self, *args)

    def __init__(self, *args):
        _sliced_wasserstein.PD_swiginit(self, _sliced_wasserstein.new_PD(*args))

    def push_back(self, x):
        return _sliced_wasserstein.PD_push_back(self, x)

    def front(self):
        return _sliced_wasserstein.PD_front(self)

    def back(self):
        return _sliced_wasserstein.PD_back(self)

    def assign(self, n, x):
        return _sliced_wasserstein.PD_assign(self, n, x)

    def resize(self, *args):
        return _sliced_wasserstein.PD_resize(self, *args)

    def insert(self, *args):
        return _sliced_wasserstein.PD_insert(self, *args)

    def reserve(self, n):
        return _sliced_wasserstein.PD_reserve(self, n)

    def capacity(self):
        return _sliced_wasserstein.PD_capacity(self)
    __swig_destroy__ = _sliced_wasserstein.delete_PD

# Register PD in _sliced_wasserstein:
_sliced_wasserstein.PD_swigregister(PD)

class pair_double_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sliced_wasserstein.pair_double_double_swiginit(self, _sliced_wasserstein.new_pair_double_double(*args))
    first = property(_sliced_wasserstein.pair_double_double_first_get, _sliced_wasserstein.pair_double_double_first_set)
    second = property(_sliced_wasserstein.pair_double_double_second_get, _sliced_wasserstein.pair_double_double_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _sliced_wasserstein.delete_pair_double_double

# Register pair_double_double in _sliced_wasserstein:
_sliced_wasserstein.pair_double_double_swigregister(pair_double_double)

NUMPI = _sliced_wasserstein.NUMPI

def compOri(p, q):
    return _sliced_wasserstein.compOri(p, q)

def compOrj(p, q):
    return _sliced_wasserstein.compOrj(p, q)

def sortAngle(p1, p2):
    return _sliced_wasserstein.sortAngle(p1, p2)

def myComp(P1, P2):
    return _sliced_wasserstein.myComp(P1, P2)
class sliced_wasserstein(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _sliced_wasserstein.sliced_wasserstein_swiginit(self, _sliced_wasserstein.new_sliced_wasserstein())
    __swig_destroy__ = _sliced_wasserstein.delete_sliced_wasserstein

    def compute_int_cos(self, alpha, beta):
        return _sliced_wasserstein.sliced_wasserstein_compute_int_cos(self, alpha, beta)

    def compute_int(self, theta1, theta2, p, q):
        return _sliced_wasserstein.sliced_wasserstein_compute_int(self, theta1, theta2, p, q)

    def compute_sw(self, V1, V2):
        return _sliced_wasserstein.sliced_wasserstein_compute_sw(self, V1, V2)

    def compute_angle(self, PersDiag, i, j):
        return _sliced_wasserstein.sliced_wasserstein_compute_angle(self, PersDiag, i, j)

    def compute_exact_SW(self, PD1, PD2):
        return _sliced_wasserstein.sliced_wasserstein_compute_exact_SW(self, PD1, PD2)

    def compute_approximate_SW(self, PD1, PD2, N=100):
        return _sliced_wasserstein.sliced_wasserstein_compute_approximate_SW(self, PD1, PD2, N)

# Register sliced_wasserstein in _sliced_wasserstein:
_sliced_wasserstein.sliced_wasserstein_swigregister(sliced_wasserstein)
cvar = _sliced_wasserstein.cvar



